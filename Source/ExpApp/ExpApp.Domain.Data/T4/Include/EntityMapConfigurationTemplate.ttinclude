<#+
// <copyright file="EntityMapConfigurationTemplate.tt" company="QuickFramework">
//  Copyright ©QuickFramework. All Rights Reserved.
// </copyright>

public class EntityMapConfigurationTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public EntityMapConfigurationTemplate(T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Map.generated.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="<#= _model.Name #>Map.generated.cs">
 
//		生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Configuration;

using Exp.Data;
using ExpApp.Domain.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>;


namespace ExpApp.Domain.Data.Mapping<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>
{
    /// <summary>
    /// 数据表映射 —— <#= _model.Description #>
    /// </summary>    
	internal partial class <#= _model.Name #>Map : EntityTypeConfiguration<<#= _model.Name #>>, IEntityMapper
    {
        /// <summary>
        /// <#= _model.Description #>-数据表映射构造函数
        /// </summary>
        public <#= _model.Name #>Map()
        {
			<#= _model.Name #>MapAppend();
        }

		/// <summary>
        /// 额外的数据映射
        /// </summary>
        partial void <#= _model.Name #>MapAppend();
		
        /// <summary>
        /// 将当前实体映射对象注册到当前数据访问上下文实体映射配置注册器中
        /// </summary>
        /// <param name="configurations">实体映射配置注册器</param>
        public void RegistTo(ConfigurationRegistrar configurations)
        {
            configurations.Add(this);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
